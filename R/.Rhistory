View()
articles <-
as.data.frame(cbind(title, link)) %>%
filter(!title %in% exclude & grepl("https://www.zeit.de/", link)) %>%
distinct() %>%
View()
url <- "https://www.zeit.de/index"
exclude <- c(
"Direkt zum Inhalt springen", "exklusive Zeit Artikel",
"Nachrichten auf ZEIT ONLINE", "Kommentare anzeigen",
"Zurück nach oben", "ZEIT ONLINE Stimmen: Hier kommen Sie zu Wort"
)
page <-
url %>%
httr::GET(url = .) %>%
rvest::read_html()
title <-
page %>%
html_elements("article") %>%
html_elements("a") %>%
xml_find_all('//*[@title and @href]') %>%
xml_attr("title")
link <-
page %>%
html_elements("article") %>%
html_elements("a") %>%
xml_find_all('//*[@title and @href]') %>%
xml_attr("href")
articles <-
as.data.frame(cbind(title, link)) %>%
filter(!title %in% exclude & grepl("https://www.zeit.de/", link)) %>%
distinct()
#-----------------------
test <- rvest::read_html(articles$link[[1]])
test %>%
html_elements(xpath = '//*[name="description"]')
articles$link[[1]]
test %>%
html_elements("meta") %>%
html_elements(xpath = '//*[name="description"]')
test %>%
html_elements("meta") %>%
html_elements(xpath = '//*[@name="description"]')
test %>%
html_elements("meta") %>%
html_elements(xpath = '//*[@name="description"]') %>%
xml_attr("content")
test %>%
html_elements(xpath = '//*[@name="description"]') %>%
xml_attr("content")
test %>%
html_elements(xpath = '//*[@name="description"]')
articles$link[[1]]
test
#-----------------------
test <- httr::GET(articles$link[[1]]) %>% rvest::read_html()
test %>%
html_elements(xpath = '//*[@name="description"]')
test %>%
html_elements(xpath = '//*[@name="description"]') %>%
xml_attr("content")
get_keywords <- function(src) {
out <-
src %>%
html_elements(xpath = '//*[@name="keywords"]') %>%
xml_attr("content")
if (rlang::is_empty(out)) out <- NA_character_
return(out)
}
get_keywords(test)
test %>%
html_elements(xpath = '//*[@rel="author"]')
test %>%
html_elements(xpath = '//*[@rel="author"]') %>%
html_text2()
get_publication_date <- function(src) {
out <-
src %>%
html_elements(xpath = '//*[@name="date"]') %>%
xml_attr("content")
if (rlang::is_empty(out)) out <- NA_character_
return(out)
}
get_publication_date(test)
get_paywall <- function(src) {
if (grepl('"paywall": "open"', html_text2(src)))
return(0L)
else
return(1L)
}
get_paywall(test)
grepl('"paywall": "open"', html_text2(test))
grepl('"paywall": null', test)
grepl('"paywall": "open"', test)
get_paywall <- function(src) {
if (grepl('"paywall": "open"', src))
return(0L)
else
return(1L)
}
get_paywall(test)
test %>%
html_elements("p")
test %>%
html_elements("p") %>%
html_text2()
test %>%
html_elements("p") %>%
html_elements(xpath = '//*[@class="paragraph"]')
test %>%
html_elements("p") %>%
html_elements(xpath = '//*[@class="paragraph artile__item"]')
test %>%
html_elements(xpath = '//*[@class="paragraph artile__item"]')
test %>%
html_elements("p")
test %>%
html_elements(xpath = '//*[@class="paragraph"]')
test %>%
html_elements(xpath = '//*[@class="paragraph article__item"]')
test %>%
html_elements(xpath = '//*[@class="paragraph article__item"]') %>%
html_text2()
test %>%
html_elements(xpath = '//*[@class="paragraph article__item"]') %>%
html_text2() %>%
paste(collapse = "")
get_body <- function(src) {
out <-
html_elements(xpath = '//*[@class="paragraph article__item"]') %>%
html_text2() %>%
paste(collapse = "")
if (rlang::is_empty(out)) out <- NA_character_
return(out)
}
# Pre-allocate output:
articles <-
articles %>%
mutate(
description = NA_character_,
keywords    = NA_character_,
date        = NA_character_,
author      = NA_character_,
body        = NA_character_
)
# Pre-allocate output:
articles <-
articles %>%
mutate(
description = NA_character_,
keywords    = NA_character_,
date        = NA_character_,
author      = NA_character_,
paywall     = NA_character_,
body        = NA_character_
)
for (i in seq_along(articles$link)) {
print(paste0("Retrieving ", i, "/", length(articles$link)))
page_src <- httr::GET(articles$link[[i]]) %>% rvest::read_html()
articles$description[[i]] <- get_description(page_src)
articles$keywords[[i]]    <- get_keywords(page_src)
articles$date[[i]]        <- get_date(page_src)
articles$author[[i]]      <- get_author(page_src)
articles$paywall[[i]]     <- get_paywall(page_src)
if (articles$paywall[[i]] == 0) {
articles$body[[i]] <- get_body(page_src)
}
}
url <- "https://www.zeit.de/index"
exclude <- c(
"Direkt zum Inhalt springen", "exklusive Zeit Artikel",
"Nachrichten auf ZEIT ONLINE", "Kommentare anzeigen",
"Zurück nach oben", "ZEIT ONLINE Stimmen: Hier kommen Sie zu Wort"
)
page <-
url %>%
httr::GET(url = .) %>%
rvest::read_html()
title <-
page %>%
html_elements("article") %>%
html_elements("a") %>%
xml_find_all('//*[@title and @href]') %>%
xml_attr("title")
link <-
page %>%
html_elements("article") %>%
html_elements("a") %>%
xml_find_all('//*[@title and @href]') %>%
xml_attr("href")
articles <-
as.data.frame(cbind(title, link)) %>%
filter(!title %in% exclude & grepl("https://www.zeit.de/", link)) %>%
distinct()
# Retrieving metadata & body:
get_description <- function(src) {
out <-
src %>%
html_elements(xpath = '//*[@name="description"]') %>%
xml_attr("content")
if (rlang::is_empty(out)) out <- NA_character_
return(out)
}
get_keywords <- function(src) {
out <-
src %>%
html_elements(xpath = '//*[@name="keywords"]') %>%
xml_attr("content")
if (rlang::is_empty(out)) out <- NA_character_
return(out)
}
get_publication_date <- function(src) {
out <-
src %>%
html_elements(xpath = '//*[@name="date"]') %>%
xml_attr("content")
if (rlang::is_empty(out)) out <- NA_character_
return(out)
}
get_author <- function(src) {
out <-
src %>%
html_elements(xpath = '//*[@rel="author"]') %>%
html_text2()
# If no author:
if (rlang::is_empty(out)) out <- NA_character_
# If multiple authors:
if (length(out) > 1) out <- paste(out, collapse = ", ")
return(out)
}
get_paywall <- function(src) {
if (grepl('"paywall": "open"', src))
return(0L)
else
return(1L)
}
get_body <- function(src) {
out <-
html_elements(xpath = '//*[@class="paragraph article__item"]') %>%
html_text2() %>%
paste(collapse = "")
if (rlang::is_empty(out)) out <- NA_character_
return(out)
}
#-----------------------
test <- httr::GET(articles$link[[1]]) %>% rvest::read_html()
# Pre-allocate output:
articles <-
articles %>%
mutate(
description = NA_character_,
keywords    = NA_character_,
date        = NA_character_,
author      = NA_character_,
paywall     = NA_character_,
body        = NA_character_
)
for (i in seq_along(articles$link)) {
print(paste0("Retrieving ", i, "/", length(articles$link)))
page_src <- httr::GET(articles$link[[i]]) %>% rvest::read_html()
articles$description[[i]] <- get_description(page_src)
articles$keywords[[i]]    <- get_keywords(page_src)
articles$date[[i]]        <- get_date(page_src)
articles$author[[i]]      <- get_author(page_src)
articles$paywall[[i]]     <- get_paywall(page_src)
if (articles$paywall[[i]] == 0) {
articles$body[[i]] <- get_body(page_src)
}
}
url <- "https://www.zeit.de/index"
exclude <- c(
"Direkt zum Inhalt springen", "exklusive Zeit Artikel",
"Nachrichten auf ZEIT ONLINE", "Kommentare anzeigen",
"Zurück nach oben", "ZEIT ONLINE Stimmen: Hier kommen Sie zu Wort"
)
page <-
url %>%
httr::GET(url = .) %>%
rvest::read_html()
title <-
page %>%
html_elements("article") %>%
html_elements("a") %>%
xml_find_all('//*[@title and @href]') %>%
xml_attr("title")
link <-
page %>%
html_elements("article") %>%
html_elements("a") %>%
xml_find_all('//*[@title and @href]') %>%
xml_attr("href")
articles <-
as.data.frame(cbind(title, link)) %>%
filter(!title %in% exclude & grepl("https://www.zeit.de/", link)) %>%
distinct()
# Retrieving metadata & body:
get_description <- function(src) {
out <-
src %>%
html_elements(xpath = '//*[@name="description"]') %>%
xml_attr("content")
if (rlang::is_empty(out)) out <- NA_character_
return(out)
}
get_keywords <- function(src) {
out <-
src %>%
html_elements(xpath = '//*[@name="keywords"]') %>%
xml_attr("content")
if (rlang::is_empty(out)) out <- NA_character_
return(out)
}
get_publication_date <- function(src) {
out <-
src %>%
html_elements(xpath = '//*[@name="date"]') %>%
xml_attr("content")
if (rlang::is_empty(out)) out <- NA_character_
return(out)
}
get_author <- function(src) {
out <-
src %>%
html_elements(xpath = '//*[@rel="author"]') %>%
html_text2()
# If no author:
if (rlang::is_empty(out)) out <- NA_character_
# If multiple authors:
if (length(out) > 1) out <- paste(out, collapse = ", ")
return(out)
}
get_paywall <- function(src) {
if (grepl('"paywall": "open"', src))
return(0L)
else
return(1L)
}
get_body <- function(src) {
out <-
html_elements(xpath = '//*[@class="paragraph article__item"]') %>%
html_text2() %>%
paste(collapse = "")
if (rlang::is_empty(out)) out <- NA_character_
return(out)
}
#-----------------------
test <- httr::GET(articles$link[[1]]) %>% rvest::read_html()
# Pre-allocate output:
articles <-
articles %>%
mutate(
description = NA_character_,
keywords    = NA_character_,
date        = NA_character_,
author      = NA_character_,
paywall     = NA_character_,
body        = NA_character_
)
for (i in seq_along(articles$link)) {
print(paste0("Retrieving ", i, "/", length(articles$link)))
page_src <- httr::GET(articles$link[[i]]) %>% rvest::read_html()
articles$description[[i]] <- get_description(page_src)
articles$keywords[[i]]    <- get_keywords(page_src)
articles$date[[i]]        <- get_publication_date(page_src)
articles$author[[i]]      <- get_author(page_src)
articles$paywall[[i]]     <- get_paywall(page_src)
if (articles$paywall[[i]] == 0) {
articles$body[[i]] <- get_body(page_src)
}
}
test <- httr::GET(articles$link[[1]]) %>% rvest::read_html()
get_body(test)
get_body <- function(src) {
out <-
src %>%
html_elements(xpath = '//*[@class="paragraph article__item"]') %>%
html_text2() %>%
paste(collapse = "")
if (rlang::is_empty(out)) out <- NA_character_
return(out)
}
url <- "https://www.zeit.de/index"
exclude <- c(
"Direkt zum Inhalt springen", "exklusive Zeit Artikel",
"Nachrichten auf ZEIT ONLINE", "Kommentare anzeigen",
"Zurück nach oben", "ZEIT ONLINE Stimmen: Hier kommen Sie zu Wort"
)
page <-
url %>%
httr::GET(url = .) %>%
rvest::read_html()
title <-
page %>%
html_elements("article") %>%
html_elements("a") %>%
xml_find_all('//*[@title and @href]') %>%
xml_attr("title")
link <-
page %>%
html_elements("article") %>%
html_elements("a") %>%
xml_find_all('//*[@title and @href]') %>%
xml_attr("href")
articles <-
as.data.frame(cbind(title, link)) %>%
filter(!title %in% exclude & grepl("https://www.zeit.de/", link)) %>%
distinct()
# Retrieving metadata & body:
get_description <- function(src) {
out <-
src %>%
html_elements(xpath = '//*[@name="description"]') %>%
xml_attr("content")
if (rlang::is_empty(out)) out <- NA_character_
return(out)
}
get_keywords <- function(src) {
out <-
src %>%
html_elements(xpath = '//*[@name="keywords"]') %>%
xml_attr("content")
if (rlang::is_empty(out)) out <- NA_character_
return(out)
}
get_publication_date <- function(src) {
out <-
src %>%
html_elements(xpath = '//*[@name="date"]') %>%
xml_attr("content")
if (rlang::is_empty(out)) out <- NA_character_
return(out)
}
get_author <- function(src) {
out <-
src %>%
html_elements(xpath = '//*[@rel="author"]') %>%
html_text2()
# If no author:
if (rlang::is_empty(out)) out <- NA_character_
# If multiple authors:
if (length(out) > 1) out <- paste(out, collapse = ", ")
return(out)
}
get_paywall <- function(src) {
if (grepl('"paywall": "open"', src))
return(0L)
else
return(1L)
}
get_body <- function(src) {
out <-
src %>%
html_elements(xpath = '//*[@class="paragraph article__item"]') %>%
html_text2() %>%
paste(collapse = "")
if (rlang::is_empty(out)) out <- NA_character_
return(out)
}
#-----------------------
test <- httr::GET(articles$link[[1]]) %>% rvest::read_html()
# Pre-allocate output:
articles <-
articles %>%
mutate(
description = NA_character_,
keywords    = NA_character_,
date        = NA_character_,
author      = NA_character_,
paywall     = NA_character_,
body        = NA_character_
)
for (i in seq_along(articles$link)) {
print(paste0("Retrieving ", i, "/", length(articles$link)))
page_src <- httr::GET(articles$link[[i]]) %>% rvest::read_html()
articles$description[[i]] <- get_description(page_src)
articles$keywords[[i]]    <- get_keywords(page_src)
articles$date[[i]]        <- get_publication_date(page_src)
articles$author[[i]]      <- get_author(page_src)
articles$paywall[[i]]     <- get_paywall(page_src)
if (articles$paywall[[i]] == 0) {
articles$body[[i]] <- get_body(page_src)
}
}
View(articles)
test <- httr::GET("https://www.zeit.de/politik/ausland/ukraine-krieg-russland-newsblog-live") %>% rvest::read_html()
test %>% get_body()
Sys.time()
# Add timestamp:
articles %>%
mutate(timestamp = Sys.time())
# Add timestamp:
articles %>%
mutate(timestamp = Sys.time()) %>%
tibble()
# Add timestamp:
articles <- articles %>% mutate(timestamp = Sys.time())
Sys.time() %>% as.character()
time <-
Sys.time() %>%
as.character() %>%
stringr::str_replace(" ", "_")
time
paste0("zeit_", time)
paste0("zeit_", time, ".csv")
getwd()
list.files("../")
setwd("code/")
list.files("../")
name <- paste0("zeit_", time, ".csv")
write.csv(articles, "../data/test.csv")
require("dplyr")
purrr::walk(c("dplyr", "rvest"), require)
